replicaCount: 1
image:
  # -- registry for pharos-image
  registry: ghcr.io
  # -- repository for pharos-image
  repository: metraction/pharos/pharos-c52785725d1132c2f91e01422b7f40ba
  # -- pull policy for pharos-image
  pullPolicy: Always

# -- list of imagePullSecrets to use. These secrets are also used to get the images to scan.
imagePullSecrets:
  - name: github-registry

ingress:
  enabled: true
  host: "pharos-staging.enpace.local"
  className: "nginx-internal"
  tls: true
  tlsSecretName: "pharos-tls"
  annotations:
    cert-manager.io/cluster-issuer: ca-issuer
    kubernetes.io/ingress.class: "nginx-internal"
    nginx.ingress.kubernetes.io/client-body-buffer-size: 400M
    nginx.ingress.kubernetes.io/proxy-body-size: 8G
    nginx.org/client-max-body-size: 8G

prometheus:
  #url: "http://rancher-monitoring-prometheus.cattle-monitoring-system.svc.cluster.local:9090"
  url: "https://prometheus.enpace.local"
  query: 'kube_pod_container_info{image_spec=~"ghcr.*|nextcloud.*"}'
  interval: 10m
  ttl: "6h" # testing if lower ttl works

caCertificates:
  # -- Enable CA certificates configMap
  configMapEnabled: true
  # -- Enable CA certificates in the reporter pod
  enabled: true
  # -- ConfigMap name for CA certificates, bring your own if configMapEnabled is true
  configMapName: ca-certificates

alerting:
  route:
    group_by: ["..."]
    continue: true
    receiver: default
    child_routes:
      - receiver: jira
        group_by:
          - digest
          - imageid
          - imagespec
          - namespace
        repeat_interval: 2m
  receivers:
    - name: "default"
    - name: "jira"
      webhook_configs:
        - url: "http://pharos-staging-jiralert:9097/alert"
          send_resolved: true

jiralert:
  enabled: true
  extraArgs: 
    - -hash-jira-label

  config:
    # File containing template definitions. Required.
    template: jiralert.tmpl
    # Global defaults, applied to all receivers where not explicitly overridden. Optional.
    defaults:
      # API access fields.
      api_url: api_url
      user: username
      # Get password from the $PASSWORD environment variable.
      password: password
      # Alternatively to user and password use a Personal Access Token
      # personal_access_token: "Your Personal Access Token". See https://confluence.atlassian.com/enterprise/using-personal-access-tokens-1026032365.html
      #personal_access_token: none
      # The type of JIRA issue to create. Required.
      issue_type: Vulnerability
      # Issue priority. Optional.
      priority: Medium
      # Go template invocation for generating the summary. Required.
      summary: '{{ template "jira.summary" . }}'
      # Go template invocation for generating the description. Optional.
      description: '{{ template "jira.description" . }}'
      # State to transition into when reopening a closed issue. Required.
      reopen_state: "To Do"
      # Do not reopen issues with this resolution. Optional.
      wont_fix_resolution: "Won't Fix"
      # Amount of time after being closed that an issue should be reopened, after which, a new issue is created.
      # Optional (default: always reopen)
      reopen_duration: 0h
      # Static label that will be added to the JIRA ticket alongisde the JIRALERT{...} or ALERT{...} label
      # static_labels: ["custom"]
      # Other projects are the projects to search for existing issues for the given alerts if
      # the main project does not have it. If no issue was found in, the main projects will
      # be used to create a new one. If the old issue is found in one of the other projects
      # (first found is used in case of duplicates) that old project's issue will be used for
      # alert updates instead of creating on in the main project.
      # other_projects: []
      # # Include ticket update as comment. Optional (default: false).
      # update_in_comment: false

    # Receiver definitions. At least one must be defined.
    receivers:
      # Must match the Alertmanager receiver name. Required.
      - name: "jira"
        # JIRA project to create the issue in. Required.
        project: PHAR
        # Copy all Prometheus labels into separate JIRA labels. Optional (default: false).
        add_group_labels: false
        # Include ticket update as comment too. Optional (default: false).
        # update_in_comment: false
        # Will be merged with the static_labels from the default map
        # static_labels: []
        # err="error \"request failed. Please analyze the request body for more details. Status code: 400\", body \"{\\\"errorMessages\\\":[],\\\"errors\\\":{\\\"customfield_10060\\\":\\\"imagespec is required.\\\",\\\"customfield_10061\\\":\\\"namespace is required.\\\",\\\"customfield_10058\\\":\\\"digest is required.\\\",\\\"customfield_10059\\\":\\\"imageid is required.\\\"}}\"" receiver=jira groupLabels="unsupported value type"
        fields:
          # ImageSpec
          customfield_10060: '{{ template "jira.imagespec" . }}'
          # Namespace
          customfield_10061: '{{ template "jira.namespace" . }}'
          # Digest
          customfield_10058: '{{ template "jira.digest" . }}'
          # ImageID
          customfield_10059: '{{ template "jira.imageid" . }}'
        auto_resolve:
          state: "Done"

issueTemplate: |
  {{`
  {{ define "jira.summary" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.imagespec }} in namespace {{ .GroupLabels.namespace }} has vulnerabilities{{ end }}
  {{ define "jira.description" }}{{ range .Alerts.Firing }}
  h4. Labels:
  ||Name||Value||
  {{ range .Labels.SortedPairs -}}
  {{ $color := "black" -}}
  {{ if eq .Name "Critical" }}{{ $color = "purple" }}{{ end -}}
  {{ if eq .Name "High" }}{{ $color = "red" }}{{ end -}}
  {{ if eq .Name "Medium" }}{{ $color = "orange" }}{{ end -}}
  {{ if eq .Name "Low" }}{{ $color = "yellow" }}{{ end -}}
  |{{ .Name }}|{color:{{ $color }}}{{ .Value }}{color}|
  {{ end }}
  h4. Annotations:
  {{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}
  {{ end }}
  Source: {{ .GeneratorURL }}
  {{ end }}
  {{ end }}

  {{ define "jira.namespace" }}
  {{ .GroupLabels.namespace }}
  {{ end }}

  {{ define "jira.imagespec" }}
  {{ .GroupLabels.imagespec }}
  {{ end }}

  {{ define "jira.imageid" }}
  {{ .GroupLabels.imageid }}
  {{ end }}

  {{ define "jira.digest" }}
  {{ .GroupLabels.digest }}
  {{ end }}
  `}}
