image:
  # -- registry for pharos-image
  registry: ghcr.io
  # -- repository for pharos-image
  repository: metraction/pharos/pharos-c52785725d1132c2f91e01422b7f40ba
  # -- pull policy for pharos-image
  pullPolicy: Always

# -- list of imagePullSecrets to use. These secrets are also used to get the images to scan.
imagePullSecrets: []
  # - name: github-registry

ingress:
  enabled: false
  # host: "pharos.my-domain.com"
  # className: nginx
  # tls: true
  # tlsSecretName: "pharos-tls"
  # annotations:
  #   cert-manager.io/cluster-issuer: letsencrypt-prod
  #   kubernetes.io/ingress.class: nginx
  #   kubernetes.io/tls-acme: 'true'
  #   nginx.ingress.kubernetes.io/client-body-buffer-size: 400M
  #   nginx.ingress.kubernetes.io/proxy-body-size: 8G
  #   nginx.org/client-max-body-size: 8G   

service:
  # -- port for the service
  port: 8080

redis:
  # -- Enable Redis deployment
  enabled: true
  # -- Redis authentication
  auth:
    # -- Enable Redis authentication
    enabled: false
  # -- Redis replica configuration
  replica:
    # -- Number of Redis replicas to deploy
    replicaCount: 1

scannerPod:
  # -- Enable the scanner pod, only neeed if you are not using direct scan
  enabled: false

priorityScannerPod:
  # -- Enable the scanner pod, only needed if you are not using direct scan
  enabled: false

# -- PostgreSQL configuration
postgres:
  # -- Enable PostgreSQL deployment
  enabled: true
  # -- PostgreSQL authentication
  auth:
    # -- Use an existing secret for PostgreSQL connection
    existingSecret: "postgres-connection"  
  primary:
    persistence:
      enabled: true
      size: 1Gi

# -- External Redis configuration (used when redis.enabled=false)
externalRedis:
  host: "localhost"
  port: 6379

# -- Service account configuration - needed to read ImagePullSecrets
serviceAccount:
  create: true

# -- Role configuration - needed to read ImagePullSecrets
role:
  create: true

controller:
  # -- Number of replicas for the controller
  replicas: 1

# -- Prometheus configuration for scanning images
prometheus:
  # -- Url of the Prometheus server
  url: "http://prometheus.prometheus.svc.cluster.local:9090"
  # -- Prometheus query to get the images to scan
  query: 'kube_pod_container_info{}'
  # -- Interval for scanning images
  interval: 10m
  # -- Context labels to add to the Prometheus context
  contextLabels: "namespace"
  # -- Time to live for the scan results, defaults to 12 hours
  ttl: "12h"
  # -- Authentication for Prometheus
  auth:
    # -- Username for Prometheus authentication
    username: ""
    # -- Password for Prometheus authentication
    password: ""
    # -- Token for Prometheus authentication
    token: ""
  authFromSecret:
    # -- Enable authentication from an existing secret
    enabled: false
    # -- Use an existing secret for Prometheus authentication
    existingSecret: ""
    # -- Key in the secret for the username
    usernameKey: "username"
    # -- Key in the secret for the password
    passwordKey: "password"
    # -- Key in the secret for the token
    tokenKey: ""

# -- Mappers configuration
mappers:
  hbs: 
    eos_v1.hbs: |
      distro: {{ .payload.Image.DistroName }}
      version: {{ .payload.Image.DistroVersion }}
      eos: {{ index .meta.eos .payload.Image.DistroName | filter "version" "matchWildcard" .payload.Image.DistroVersion | map "field" "eos" | first }}
  files:
    eos.yaml: files/eos.yaml

caCertificates:
  # -- Enable CA certificates configMap
  configMapEnabled: false
  # -- Enable CA certificates in the reporter pod
  enabled: false
  # -- ConfigMap name for CA certificates, bring your own if configMapEnabled is true
  configMapName: ca-certificates
    
    