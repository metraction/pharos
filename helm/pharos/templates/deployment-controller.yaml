apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pharos-controller
  name: pharos-controller
spec:
  replicas: {{ .Values.controller.replicas }}
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: pharos-controller
  strategy: {}
  template:
    metadata:
      namespace: {{ .Release.Namespace }}
      labels:
        app: pharos-controller
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: pharos-controller
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        args: ["http", "--config", "/config/.pharos.yaml", "--database.dsn", "postgres://$(PHAROS_DATABASE_USERNAME):$(PHAROS_DATABASE_PASSWORD)@{{ include "pharos.fullname" . }}-postgres:5432/$(PHAROS_DATABASE)?sslmode=disable", "--database.driver", "postgres"]
        ports:
          - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /api/v1/metrics/liveness
            port: 8080
            httpHeaders:
          failureThreshold: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/metrics/readiness
            port: 8080
            httpHeaders:
          failureThreshold: 1
          periodSeconds: 10
        env:
          {{- if .Values.postgres.auth.existingSecret }}
          - name: PHAROS_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.auth.existingSecret }}
                key: username
          - name: PHAROS_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.auth.existingSecret }}
                key: password
          {{- else }}
          - name: PHAROS_DATABASE_USERNAME
            value: "{{ .Values.postgres.auth.username }}"
          - name: PHAROS_DATABASE_PASSWORD
            value: "{{ .Values.postgres.auth.password }}"
          {{- end }}
          - name: PHAROS_DATABASE
            value: "{{ .Values.postgres.auth.database }}"
          - name: PHAROS_COLLECTOR_QUEUESIZE
            value: "{{ .Values.controller.collector.queueSize }}"
          - name: PHAROS_PUBLISHER_QUEUESIZE
            value: "{{ .Values.controller.publisher.queueSize }}"
          - name: APP_DATA_PATH
            value: "/pharos"
          {{- with .Values.enrichers }}
          - name: PHAROS_ENRICHERCOMMON_ENRICHERPATH
            value: "/pharos/enrichers/enrichers.yaml"
          {{- end }}
          - name: PHAROS_ENRICHERCOMMON_UIURL
            value: "{{ .Values.enrichers.uiUrl }}"
        volumeMounts:
          - name: config-volume
            mountPath: /config/.pharos.yaml
            subPath: .pharos.yaml
          - name: enrichers-volume
            mountPath: /pharos/enrichers
      volumes:
        - name: config-volume
          configMap:
            name: pharos-config
        - name: enrichers-volume
          configMap:
            name: {{ .Values.enrichers.configMap }}
