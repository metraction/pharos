{{- if  .Values.postgres.auth.generateSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.postgres.auth.existingSecret }}
  labels:
    {{- include "pharos.labels" . | nindent 4 }}
type: Opaque
data:
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace .Values.postgres.auth.existingSecret) -}}
  {{- if $secret }}
    {{- $postgresPassword := index $secret.data "password" }}
  {{- else }}  
    {{- $postgresPassword := randAlphaNum 16 }}
  {{- end }} 
  {{- $postgresUsername := "pharos" }}
  {{- $postgresPort := "5432" }}
  {{- $postgresEndpoint := printf "%s-postgres.%s.svc.cluster.local" .Release.Name .Release.Namespace }}
  {{- $postgresDSN := printf "postgres://%s:%s@%s:%s/%s?sslmode=disable" $postgresUsername $postgresPassword $postgresEndpoint $postgresPort $postgresUsername }}
  
  # Store the generated values
  postgres-password: {{ $postgresPassword | b64enc }}
  password: {{ $postgresPassword | b64enc }}
  username: {{ $postgresUsername | b64enc }}
  port: {{ $postgresPort | b64enc }}
  endpoint: {{ $postgresEndpoint | b64enc }}
  dsn: {{ $postgresDSN | b64enc }}
{{- end }}
