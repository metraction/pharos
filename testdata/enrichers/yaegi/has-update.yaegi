package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"time"
)

type ArtifactHubPackage struct {
	AppVersion string `json:"app_version"`
	Version    string `json:"version"`
}

// enrich function that checks for Velero image updates
func enrich(payload map[string]interface{}) map[string]interface{} {
	result := make(map[string]interface{})
	result["hasUpdate"] = false
	result["reason"] = "No update check performed"

	// Extract image information from payload
	payloadData, ok := payload["payload"].(map[string]interface{})
	if !ok {
		result["reason"] = "Invalid payload structure"
		return result
	}

	imageData, ok := payloadData["Image"].(map[string]interface{})
	if !ok {
		result["reason"] = "No image data found"
		return result
	}

	imageSpec, ok := imageData["ImageSpec"].(string)
	if !ok {
		result["reason"] = "No image spec found"
		return result
	}

	// Check if this is a Velero image
	if !strings.Contains(strings.ToLower(imageSpec), "velero") {
		result["reason"] = "Not a Velero image"
		return result
	}

	// Extract version from image spec (e.g., velero/velero:v1.12.0)
	versionRegex := regexp.MustCompile(`velero.*:v?(\d+\.\d+\.\d+)`)
	matches := versionRegex.FindStringSubmatch(imageSpec)
	if len(matches) < 2 {
		result["reason"] = "Could not extract version from Velero image"
		return result
	}

	currentVersion := matches[1]
	
	// Get latest version from Artifact Hub API
	latestVersion, err := getLatestVeleroVersion()
	if err != nil {
		result["reason"] = fmt.Sprintf("Failed to get latest version: %v", err)
		return result
	}

	// Compare versions using semverConstraint function
	hasUpdate := semverConstraint(currentVersion, "< " + latestVersion)

	if hasUpdate {
		result["hasUpdate"] = true
		result["reason"] = fmt.Sprintf("Update available: %s -> %s", currentVersion, latestVersion)
	} else {
		result["reason"] = fmt.Sprintf("Current version %s is up to date (latest: %s)", currentVersion, latestVersion)
	}

	return result
}

func getLatestVeleroVersion() (string, error) {
	// Artifact Hub API endpoint for Velero Helm chart
	url := "https://artifacthub.io/api/v1/packages/helm/vmware-tanzu/velero"
	
	client := &http.Client{
		Timeout: 10 * time.Second,
	}
	
	resp, err := client.Get(url)
	if err != nil {
		return "", fmt.Errorf("failed to fetch from Artifact Hub: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API returned status %d", resp.StatusCode)
	}

	var pkg ArtifactHubPackage
	if err := json.NewDecoder(resp.Body).Decode(&pkg); err != nil {
		return "", fmt.Errorf("failed to decode response: %v", err)
	}

	if pkg.AppVersion == "" {
		return "", fmt.Errorf("no app version found in response")
	}

	// Remove 'v' prefix if present
	version := strings.TrimPrefix(pkg.AppVersion, "v")
	return version, nil
}
