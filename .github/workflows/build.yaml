name: Build
on:
  push:
    branches: 
    - main
    - PH-52/*
    - PH-47/*
    - PH-54/*
    - PH-79/*
    - PH-89/*
    - PH-92/*
    - PH-94/*
    - PH-38/*
    tags:
    - 'v*'
  pull_request:
    branches:
    - main
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests?'
        default: 'false'
        required: false
permissions:
  contents: read
  packages: write

jobs:
  go-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Go mod cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests
        run: go test ./... -v -race -coverprofile=coverage.txt -covermode=atomic

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  ko-build:
    # Run this job only on push events, not when manually triggered just for tests
    if: github.event_name == 'push'
    needs: [go-test]
    uses: metraction/github-actions/.github/workflows/ko-build.yaml@main
    secrets: inherit
    
  push-helm-chart:
    uses: metraction/github-actions/.github/workflows/helm-push.yaml@main
    needs: [ko-build]
    with:
      chart_dir: helm/pharos
      chart_name: pharos
      destination: .
      registry: oci://ghcr.io/metraction/charts
    secrets: inherit
  
  get-version:
    if: github.event.inputs.run_integration_tests == 'true' || contains(github.event.head_commit.message, 'run_integration_tests')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from semver.sh
        id: version
        run: |
          VERSION=$(curl -sSL "https://raw.githubusercontent.com/metraction/github-actions/refs/heads/main/scripts/semver.sh" | bash)
          VERSION=$(echo "$VERSION" | sed 's/+/_/g')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

  integration-test:
    if: github.event.inputs.run_integration_tests == 'true' || contains(github.event.head_commit.message, 'run_integration_tests')
    needs: [get-version, ko-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for checkout
      packages: read # Required to pull images from GHCR
    services:
      redis:
        image: redis:6.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust

      scanner:
        # The image is tagged with the version from semver.sh
        image: ghcr.io/metraction/pharos/pharos-c52785725d1132c2f91e01422b7f40ba:${{ needs.get-version.outputs.version }}
        env:
          PHAROS_REDIS_DSN: redis:6379
          PHAROS_SCANNER_CACHEENDPOINT: redis://redis:6379

      controller:
        # The image is tagged with the version from semver.sh
        image: ghcr.io/metraction/pharos/pharos-c52785725d1132c2f91e01422b7f40ba:${{ needs.get-version.outputs.version }}
        env:
          PHAROS_REDIS_DSN: redis:6379
          PHAROS_SCANNER_CACHEENDPOINT: redis://redis:6379
          PHAROS_COMMAND: http

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23' # Or your project's Go version

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to initialize..."
          sleep 15 # Adjust as needed, or implement a more robust health check for the scanner

      - name: Run http integration tests
        run: |
          # Wait for HTTP service to be ready
          echo "Waiting for HTTP service to be available..."
          timeout 30 bash -c 'until curl -s http://controller:8080/health; do sleep 1; done'
          
          # Send request and capture response
          echo "Sending test request to API..."
          response=$(curl -s -w "\n%{http_code}" -X POST http://controller:8080/api/pharosscantask/asyncscan \
            -H "Content-Type: application/json" \
            -d '{
              "jobId": "2",
              "status": "",
              "engine": "",
              "error": "",
              "authdsn": "registry:///?tlscheck=false",
              "imagespec": "rancher/nginx-ingress-controller:nginx-1.11.3-rancher1",
              "platform": "linux/amd64",
              "context": {
                "namespace": "ingress-nginx"
              },
              "contextRootKey": "namespace=ingress-nginx,",
              "rxdigest": "",
              "rxplatform": "",
              "cachettl": 0,
              "scanttl": 60000000000,
              "timeout": 180000000000,
              "created": "2025-07-02T10:20:35.784021+02:00",
              "updated": "2025-07-02T10:20:35.784021+02:00"
            }')
          
          # Extract status code
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')
          
          # Check if request was successful
          echo "Response body: $response_body"
          echo "Status code: $status_code"
          
          if [[ "$status_code" -ge 200 && "$status_code" -lt 300 ]]; then
            echo "HTTP request successful"
          else
            echo "HTTP request failed with status $status_code"
            exit 1
          fi

      - name: Run controller integration tests
        env:
          DATABASE_DSN: "postgres://postgres:postgres@localhost:5432?sslmode=disable"
          DATABASE_DRIVER: "postgres"
        run: |
          go test ./internal/controllers -timeout=5m -v

  benchmark-test:
    if: github.event.inputs.run_benchmark_tests == 'true' || contains(github.event.head_commit.message, 'run_benchmark_tests')
    needs: [get-version, ko-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for checkout
      packages: read # Required to pull images from GHCR
    services:
      redis:
        image: redis:6.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust

      scanner:
        # The image is tagged with the version from semver.sh
        image: ghcr.io/metraction/pharos/pharos-c52785725d1132c2f91e01422b7f40ba:${{ needs.get-version.outputs.version }}
        env:
          PHAROS_REDIS_DSN: redis:6379
          PHAROS_SCANNER_CACHEENDPOINT: redis://redis:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23' # Or your project's Go version

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to initialize..."
          sleep 15 # Adjust as needed, or implement a more robust health check for the scanner

      - name: Run benchmark tests
        env:
          DOCKER_REGISTRIES_AUTH: "registry://spastai\\@gmail.com:${{ secrets.GITHUB_TOKEN }}@ghcr.io/metraction"
        run: |
          # These tests should publish to Redis, and the scanner service should consume.
          # The benchmark test (routing/publish_test.go) is configured to use localhost:6379 for Redis.
          go test ./internal/routing -bench=. -benchmem -timeout=5m

      - name: Show scanner service logs
        run: |
          echo "Scanner service logs:"
          docker logs ${{ job.services.scanner.id }}

      - name: Check scanner service logs on failure
        if: failure()
        run: |
          echo "Tests failed. Scanner logs are available in the 'scanner' service logs in the GitHub Actions UI."
          # The logs for services are automatically collected by the runner and displayed in the UI.
          # This step is just a pointer for easier debugging.