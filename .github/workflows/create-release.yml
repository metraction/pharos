
name: SLSA Go releaser
on:
  release:
    types: [published]
  push:
    branches:
      - main

jobs:
  go-test:
    if: (contains(github.event.head_commit.message, 'action:create-release') && github.event_name == 'push') || github.event_name == 'release'
    uses: ./.github/workflows/go-test.yaml
    secrets: inherit
  release-on-push:
    if: (contains(github.event.head_commit.message, 'action:create-release') && github.event_name == 'push') 
    runs-on: ubuntu-latest
    needs: [go-test]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: update
        id: update
        run: |
          git tag -l
          git config --global user.email "actions@metraction.org"
          git config --global user.name "GitHub Actions"
          oldtag=$(git describe --tags --abbrev=0)
          IFS=. read -r major minor patch <<EOF
          $oldtag
          EOF
          if [[ "${{ github.event.head_commit.message }}" == *"action:create-release:major"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
            echo "Bumping major version"
          elif [[ "${{ github.event.head_commit.message }}" == *"action:create-release:minor"* ]]; then
            minor=$((minor + 1))
            patch=0
            echo "Bumping minor version"
          else
            patch=$((patch + 1))
          fi
          tag="$major.$minor.$patch"
          echo "New tag: $tag"
          git tag -a "$tag" -m "$tag"
          git push origin "$tag"
          echo "version=$tag" >> "$GITHUB_OUTPUT"
          echo "ociversion=$tag" >> "$GITHUB_OUTPUT"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.update.outputs.version }}
          release_name: ${{ steps.update.outputs.version }}
          body:  |
            ## Changes in version ${{ steps.update.outputs.version }}
            ## Download Docker image
            Install from the command line
            ```
            docker pull ghcr.io/metraction/pharos:${{ steps.update.outputs.ociversion }}
            ```
            Use as base image in Dockerfile:
            ```
            FROM ghcr.io/metraction/pharos:${{ steps.update.outputs.ociversion }}
            ```
            ## Use helm chart

            Pull the helm chart
            ```
            helm pull oci://ghcr.io:443/metraction/charts/pharos --version ${{ steps.update.outputs.ociversion }}
            ```      
          draft: false
          prerelease: false
  prepare-args:
    if: (contains(github.event.head_commit.message, 'action:create-release') && github.event_name == 'push') || github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [release-on-push, go-test]
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.version.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get Version
        id: version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Creating binaries for: $VERSION"
      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  ko-build:
    if: (contains(github.event.head_commit.message, 'action:create-release') && github.event_name == 'push') || github.event_name == 'release'
    needs: [release-on-push, go-test, prepare-args]
    uses: metraction/github-actions/.github/workflows/ko-build.yaml@main
    secrets: inherit
    with:
      version: ${{ needs.prepare-args.outputs.ociversion }}
    
  push-helm-chart:
    if: (contains(github.event.head_commit.message, 'action:create-release') && github.event_name == 'push') || github.event_name == 'release'
    uses: metraction/github-actions/.github/workflows/helm-push.yaml@main
    needs: [ko-build, prepare-args]
    with:
      chart_dir: helm/pharos
      chart_name: pharos
      destination: .
      registry: oci://ghcr.io/metraction/charts
      version: ${{ needs.prepare-args.outputs.ociversion }}
    secrets: inherit

  #  This job uses the SLSA Go builder to create binaries for multiple OS/ARCH combinations.
  #  See here:  https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/go/README.md#configuration-file
  #  For more options, see https://github.com/slsa-framework/slsa-github-generator#golang-projects
  build-binary:
    if: (contains(github.event.head_commit.message, 'action:create-release') && github.event_name == 'push') || github.event_name == 'release'
    permissions:
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read   # To read workflow path.
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0
    needs: prepare-args
    strategy:
      matrix:
        os:
          - linux
          # - windows
          - darwin
        arch:
          - amd64
          - arm64
    with:
      go-version-file: ./go.mod
      config-file: .slsa-goreleaser/${{matrix.os}}-${{matrix.arch}}.yml
      evaluated-envs: "COMMIT_DATE:${{needs.prepare-args.outputs.commit-date}}, COMMIT:${{needs.prepare-args.outputs.commit}}, VERSION:${{ needs.prepare-args.outputs.version }}, TREE_STATE:${{needs.prepare-args.outputs.tree-state}}"
      upload-tag-name: ${{ needs.prepare-args.outputs.version }}
