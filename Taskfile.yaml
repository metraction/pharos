# https://taskfile.dev

version: '3'

vars:
  REGISTRY_USER: pharos
  REGISTRY_PASSWORD: candela707
  PODEXE:
    sh: |
      if command -v docker >/dev/null 2>&1; then
        echo docker
      else
        echo podman
      fi

dotenv:
  - .env

silent: true

tasks:
  pod-up:
    desc: App start (compose)
    cmds:
      - echo "App up"
      - podman-compose -f docker-compose.yaml up

  pod-down:
    desc: App stop (compose)
    cmds:
      - echo "App down"
      - podman-compose -f docker-compose.yaml down

  scanner:
    desc: Run scanner [id=1,engine=grype]
    requires:
      vars: [engine,id]
    cmds:
      -  go run scanner/main.go scanner --engine {{.engine}} --outdir _data/scanner --worker scanner-{{.id}} --vulndbdir ./_data/_{{.engine}}-{{.id}}

  check:
    desc: Run pharos check
    cmds:
      - go run scanner/main.go check  

  receiver:
    desc: Run receiver
    cmds:
      -  go run scanner/main.go receiver --outdir _data/receiver


  registry-init:
    desc: Populate local registry with images
    preconditions:
      - sh: command -v podman
        msg: "Podman is not installed or not in your PATH."
      - export PODEXE=runner
    vars:
      devdir: _runtest
    cmds:
      - echo "-----< Initialize local test deployment >-----"
      - 'echo "- devdir:  {{.devdir}}"'
      - 'echo "- podexe:  {{.PODEXE}}"'
      - mkdir -p {{.devdir}}
      - mkdir -p {{.devdir}}/certs
      - mkdir -p _registry

      # create registry htpasswd
      - echo "Generate registry htpasswd registry .."
      - '{{.PODEXE}} run --rm --entrypoint htpasswd httpd:2 -Bbn {{.REGISTRY_USER}} {{.REGISTRY_PASSWORD}} > {{.devdir}}/htpasswd'

      # create registry certificates
      - echo "Generate registry certificats .."
      - openssl req -newkey rsa:4096 -nodes -sha256 -addext "subjectAltName=DNS:localhost" -keyout {{.devdir}}/certs/domain.key -x509 -days 365 -out {{.devdir}}/certs/domain.crt -subj "/CN=localhost" 2>/dev/null

      # create registry certificates
      - echo "**** copy domain.crt to {{.PODEXE}} certificate to the client trust it ****"
      - echo "podman             cp {{.devdir}}/certs/domain.crt /etc/containers/certs.d/localhost:5000/ca.crt"
      - echo "podman (rootless)  cp {{.devdir}}/certs/domain.crt ~/.config/containers/certs.d/localhost:5000/ca.crt"

  registry-seed-2:
    desc: Seed all local images
    vars:
      registry: pharos.secimo.net
      images:
        sh: 'cat ./images.txt'

        # sh: podman images --format "{{.Repository}}:{{.Tag}}"
    cmds:
      - echo "registry {{.registry}}"
      - for:
          var: images
        cmd: |
          {{.PODEXE}} tag {{.ITEM}} {{.registry}}/{{.ITEM}}
          {{.PODEXE}} push --tls-verify=false {{.registry}}/{{.ITEM}}




  registry-seed:
    desc: Seed local pharos.registry with images
    vars:
      registry: pharos.secimo.net
      images:
        # remove locally
        # podman rmi --force  $(podman images --format "{{.Repository}}:{{.Tag}}" | grep '5000')

        # ghcr.io/digininja/dvwa:461b83a
        - dvwa:461b83a

        # docker pull kalilinux/kali-rolling:latest
        - kalilinux/kali-rolling:latest

        # docker.io/library/registry  2
        - registry:2
        - registry:3

        # docker.io/library/redis:8.0.2-alpine
        - redis:7.4.4-alpine
        - redis:8.0.1-alpine
        - redis:8.0.2-alpine

        # docker.io/library/postgres:17.4
        - postgres:13.21
        - postgres:14.18
        - postgres:17.4
        - postgres:17.5

        # docker.io/library/emqx:5.8.6
        - emqx:5.8
        - emqx:5.7
        - emqx:5.6
        # eclipse-mosquitto:2.0
        - eclipse-mosquitto:2.0
        - eclipse-mosquitto:2.0.21
        - eclipse-mosquitto:2.0.20
        - eclipse-mosquitto:2.0.19
        - eclipse-mosquitto:2.0.18
        - eclipse-mosquitto:2.0.17

        # nextcloud:31.0
        - nextcloud:31.0
        - nextcloud:30.0
        - nextcloud:29.0
        - nextcloud:28.0
        - nextcloud:27.0
        - nextcloud:26.0

        # memcached:1.6.38
        - memcached:1.6.38
        - memcached:1.5
        - memcached:1.4
        - memcached:1.3

        # mongo:8.0.10
        - mongo:8.0.10
        - mongo:8.0
        - mongo:7.0
        - mongo:6.0

        # rabbitmq:3.13
        - rabbitmq:3.13
        - rabbitmq:3.12
        - rabbitmq:3.11
        - rabbitmq:3.10
        - rabbitmq:3.9

        # docker:28.3
        - docker:28.3
        - docker:28.2
        - docker:28.1
        - docker:28.0
        - docker:27.0
        - docker:26.0

        # openjdk:26-jdk
        - openjdk:26-jdk
        - openjdk:25-jdk
        - openjdk:24-jdk
        - openjdk:23-jdk
        - openjdk:22-jdk

        # golang:1.24.4
        - golang:1.24.4
        - golang:1.24.0
        - golang:1.23.0
        - golang:1.22.0
        - golang:1.21.0
        - golang:1.20.0
        - golang:1.19.0
        - golang:1.18.0

        # ruby:3.4
        - ruby:3.4
        - ruby:3.3
        - ruby:3.2
        - ruby:3.1
        - ruby:3.0
        - ruby:2.0

        # coredns/coredns:1.12.2
        - coredns:1.12.2
        - coredns:1.12.1
        - coredns:1.12.0
        - coredns:1.11.4
        - coredns:1.11.3
        - coredns:1.11.1
        - coredns:1.11.0

        # nodered/node-red:3.1
        - node-red:3.0
        - node-red:3.1
        - node-red:4.0

        # python:3.14.0b3-slim
        - python:3.14.0b3
        - python:3.14.0b3-slim
        - python:3.14.0b3-bullseye
        - python:3.14.0b3-bookworm
        - python:3.14.0b3-alpine


        # docker pull bitnami/node:24.2.0
        - node:24.0.0
        - node:24.1.0
        - node:24.2.0

        # docker.io/library/ubuntu:24.04
        - ubuntu:16.04
        - ubuntu:18.04
        - ubuntu:20.04
        - ubuntu:22.04
        - ubuntu:24.04

        # debian:bullseye
        - debian:bullseye
        - debian:12
        - debian:11
        - debian:10
        - debian:9

        # docker.io/library/busybox:1.35
        - busybox:1.35
        - busybox:1.37

        # docker.io/library/alpine:3.22
        - alpine:3.16
        - alpine:3.17
        - alpine:3.18
        - alpine:3.19
        - alpine:3.20
        - alpine:3.21
        - alpine:3.22

        # docker.io/axigen/axigen:10.5.0
        - axigen:10.4.0
        - axigen:10.5.0
        - axigen:10.6.0

        # docker.io/library/nginx:1.20
        - nginx:1.20
        - nginx:1.21
        - nginx:1.22
        - nginx:1.23
        - nginx:1.24
        - nginx:1.25
        - nginx:1.26
        - nginx:1.27

    cmds:
      - podman login {{.registry}} -u {{.REGISTRY_USER}} -p {{.REGISTRY_PASSWORD}}
      - echo "seed {{.registry}} .."
      - for:
          var: images
        cmd: |
          {{.PODEXE}} tag {{.ITEM}} {{.registry}}/{{.ITEM}}
          {{.PODEXE}} push --tls-verify=false {{.registry}}/{{.ITEM}}
      - curl -X GET https://{{.REGISTRY_USER}}:{{.REGISTRY_PASSWORD}}@pharos.secimo.net:5000/v2/_catalog


  scan:
    desc: Scan image [name], [tag] with grype, trivy, cdxgen
    requires:
      vars: [name,tag]
    vars:
      image:   docker.io/{{.name}}:{{.tag}}
      scanfile: _scans/{{.name}}/{{.name}}-{{.tag}}.scan
      sbomfile: _scans/{{.name}}/{{.name}}-{{.tag}}.sbom
    cmds:
      - 'echo "image:  {{.image}}"'
      - 'echo "outdir: {{.outdir}}"'
      - mkdir -p _scans
      - mkdir -p _scans/{{.name}}

      # Create cyclonedx SBOM with grype, trivy, cdxgetn
      - cdxgen --type docker {{.image}}                         -o {{.sbomfile}}.cdxgetn.sbom-cyclonedx.json
      - trivy image {{.image}}                 -f cyclonedx     -o {{.sbomfile}}.trivy.sbom-cyclonedx.json
      - syft {{.image}}                        -o cyclonedx-json > {{.sbomfile}}.syft.sbom-cyclonedx.json
      - syft {{.image}}                        -o syft-json      > {{.sbomfile}}.syft.sbom-syft.json

      # Scan sbom with Trivy
      - trivy sbom {{.sbomfile}}.trivy.sbom-cyclonedx.json --scanners vuln -f json -o {{.scanfile}}.trivy.scan-cyclonedx.json
      - trivy image {{.image}}                             --scanners vuln -f json -o {{.scanfile}}.trivy.scan-image.json

      # Scan sbom with grype
      - grype sbom:{{.sbomfile}}.syft.sbom-cyclonedx.json   -o json    > {{.scanfile}}.grype.scan-cyclondex-0.json
      - grype sbom:{{.sbomfile}}.trivy.sbom-cyclonedx.json   -o json    > {{.scanfile}}.grype.scan-cyclondex-1.json
      - grype {{.image}}       -o json    > {{.scanfile}}.grype.scan-image.json

  trivy-db:
    desc: Show trivy db
    vars:
      path: ~/Library/Caches/trivy/db/
    cmds:
      - echo "dir {{.path}}"
      - ls ~/Library/Caches/trivy/db/
